# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type EcommerceProducts{
	productList:  [EcommerceProduct!]!
	count:        Int!
}

type EcommerceProduct{
	id:                        Int!
	categoriesId:              Int!
	productName:               String!
	productDescription:        String!
	productImagePath:          String!
	productVideoPath:          String!
	sku:                       String!
	tax:                       Int!
	totalcost:                 Int!
	isActive:                  Int!
	createdOn:                 Time!
	createdBy:                 Int!
	modifiedOn:                Time
	modifiedBy:                Int
	isDeleted:                 Int!
	deletedBy:                 Int
	deletedOn:                 Time
	defaultPrice:              Int! 
	discountPrice:             Int
	specialPrice:              Int
	ecommerceCart:             EcommerceCart
} 

type ProductPricing{
	id:          Int!
	priceId:     Int!
	sku:         String!
	priority:    Int!
	price:       Int!
	startDtae:   Time!
	endDate:     Time!
	type:        String!
}

type EcommerceCart{
	id:              Int!
	productId:       Int!
	customerId:      Int!
	quantity:        Int!
	createdOn:       Time!
	modifiedOn:      Time
	isDeleted:       Int!
	deletedOn:       Time
}

type EcommerceCartDetails{
	cartList:        [EcommerceProduct!]!
	orderSummary:    OrderSummary!
	Count:           Int!
}

type OrderSummary{
	subTotal:         LargeInt!
	shippingAmount:   Int!
	totalTax:         LargeInt!
	totalCost:        LargeInt!  
}

extend type Query{
    ecommerceProductList(limit: Int!,offset: Int!,filter: ProductFilter,sort: ProductSort): EcommerceProducts! 
	ecommerceProductDetails(productId: Int!): EcommerceProduct!
	ecommerceCartList(limit: Int!,offset: Int!,customerId: Int!):EcommerceCartDetails!
}

extend type Mutation{
	ecommerceAddToCart(productId: Int!,customerId: Int!,quantity: Int!): Boolean!
	ecommerceOrderPlacement(customerId: Int!,productId: Int!): Boolean!
}

input ProductFilter{
	releaseDate:           String
	startingPrice:         Int
	endingPrice:           Int
	categoryName:          String
	categoryId:            Int
	starRatings:           Float
}

input ProductSort{
	price:        Int
	date:         Int
}